import argparse

import config as cfg

def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-SEED', type=int, default=cfg.SEED)
    parser.add_argument('-DEVICE', type=str, default=cfg.DEVICE)

    parser.add_argument('-DATA_ROOT', type=str, default=cfg.DATA_ROOT)
    parser.add_argument('-CLASSES', type=str, default=cfg.DATA_INFO["CLASSES"])
    parser.add_argument('-GROUPS', type=str, default=cfg.DATA_INFO["GROUPS"])
    parser.add_argument('-NUM_CLASSES', type=int, default=cfg.DATA_INFO["NUM_CLASSES"])
    parser.add_argument('-MAX_NUM_VIEWS', type=int, default=cfg.MAX_NUM_VIEWS)
    parser.add_argument('-IMAGE_SIZE', type=int, default=cfg.IMAGE_SIZE)
    parser.add_argument('-HPIQ', type=str, default=cfg.HPIQ)

    parser.add_argument('-ARCHITECTURE', type=str, default=cfg.ARCHITECTURE)
    parser.add_argument('-FEATURE_DIM', type=int, default=cfg.FEATURE_DIM)

    parser.add_argument('-NUM_WORKERS', type=int, default=cfg.NUM_WORKERS)
    parser.add_argument('-SV_EPOCHS', type=int, default=cfg.SV_EPOCHS)
    parser.add_argument('-TRAIN_SV_BS', type=int, default=cfg.TRAIN_SV_BS)
    parser.add_argument('-TEST_SV_BS', type=int, default=cfg.TEST_SV_BS)
    parser.add_argument('-SV_MOMENTUM', type=float, default=cfg.SV_MOMENTUM)
    parser.add_argument('-SV_WEIGHT_DECAY', type=float, default=cfg.SV_WEIGHT_DECAY)
    parser.add_argument('-SV_LR_INIT', type=float, default=cfg.SV_LR_INIT)
    parser.add_argument('-MV_EPOCHS', type=int, default=cfg.MV_EPOCHS)
    parser.add_argument('-MV_WARMUP_EPOCHS', type=int, default=cfg.MV_WARMUP_EPOCHS)
    parser.add_argument('-TRAIN_MV_BS', type=int, default=cfg.TRAIN_MV_BS)
    parser.add_argument('-TEST_MV_BS', type=int, default=cfg.TEST_MV_BS)
    parser.add_argument('-MV_MOMENTUM', type=float, default=cfg.MV_MOMENTUM)
    parser.add_argument('-MV_WEIGHT_DECAY', type=float, default=cfg.MV_WEIGHT_DECAY)
    parser.add_argument('-MV_LR_INIT', type=float, default=cfg.MV_LR_INIT)
    parser.add_argument('-MV_LR_END', type=float, default=cfg.MV_LR_END)
    parser.add_argument('-TEST_T', type=float, default=cfg.TEST_T)

    parser.add_argument('-SV_TYPE', type=str, default=cfg.SV_TYPE)
    parser.add_argument('-KD_T', type=float, default=cfg.KD_T)
    parser.add_argument('-KD_ALPHA', type=float, default=cfg.KD_ALPHA)
    parser.add_argument('-BS_CHECKPOINT', type=int, default=cfg.BS_CHECKPOINT)
    parser.add_argument('-SB_BETA', type=float, default=cfg.SB_BETA)
    parser.add_argument('-HB_BETA', type=float, default=cfg.HB_BETA)
    parser.add_argument('-LS_SMOOTH', type=float, default=cfg.LS_SMOOTH)
    parser.add_argument('-DB_CHECKPOINT', type=int, default=cfg.DB_CHECKPOINT)
    parser.add_argument('-DB_ALPHAS_F', type=str, default=cfg.DB_ALPHAS_F)
    parser.add_argument('-DB_BETAS_F', type=str, default=cfg.DB_BETAS_F)
    parser.add_argument('-DB_LAMBDAS_F', type=str, default=cfg.DB_LAMBDAS_F)
    parser.add_argument('-DB_MAX_LOSS_BOUND_F', type=int, default=cfg.DB_MAX_LOSS_BOUND_F)
    parser.add_argument('-DB_MIN_LOSS_BOUND_F', type=int, default=cfg.DB_MIN_LOSS_BOUND_F)
    parser.add_argument('-DB_LOSS_BOUND_F', type=float, default=cfg.DB_LOSS_BOUND_F)
    parser.add_argument('-DB_RESOLUTION_F', type=int, default=cfg.DB_RESOLUTION_F)
    parser.add_argument('-DB_MAX_ITERATION_F', type=int, default=cfg.DB_MAX_ITERATION_F)
    parser.add_argument('-DB_AVOID_ZERO_EPS_F', type=float, default=cfg.DB_AVOID_ZERO_EPS_F)
    parser.add_argument('-DB_EM_EPS_F', type=float, default=cfg.DB_EM_EPS_F)
    parser.add_argument('-DB_NAN_EPS_F', type=float, default=cfg.DB_NAN_EPS_F)
    parser.add_argument('-SAT_CHECKPOINT', type=int, default=cfg.SAT_CHECKPOINT)
    parser.add_argument('-SAT_ALPHA', type=float, default=cfg.SAT_ALPHA)
    parser.add_argument('-LRT_RETRO_EPOCH', type=int, default=cfg.LRT_RETRO_EPOCH)
    parser.add_argument('-LRT_UPDATE_EPOCH', type=int, default=cfg.LRT_UPDATE_EPOCH)
    parser.add_argument('-LRT_INTERVAL_EPOCH', type=int, default=cfg.LRT_INTERVAL_EPOCH)
    parser.add_argument('-LRT_EVERY_N_EPOCH', type=int, default=cfg.LRT_EVERY_N_EPOCH)
    parser.add_argument('-LRT_DELTA_X_F', type=float, default=cfg.LRT_DELTA_X_F)
    parser.add_argument('-LRT_DELTA_Y_F', type=float, default=cfg.LRT_DELTA_Y_F)
    parser.add_argument('-LRT_SOFT_EPS_F', type=float, default=cfg.LRT_SOFT_EPS_F)
    parser.add_argument('-LRT_UPDATE_EPS_F', type=float, default=cfg.LRT_UPDATE_EPS_F)
    parser.add_argument('-LRT_RHO_F', type=float, default=cfg.LRT_RHO_F)
    parser.add_argument('-LRT_FLIP_EPS_F', type=float, default=cfg.LRT_FLIP_EPS_F)
    parser.add_argument('-PLC_ROLL_WINDOW', type=int, default=cfg.PLC_ROLL_WINDOW)
    parser.add_argument('-PLC_WARM_UP', type=int, default=cfg.PLC_WARM_UP)
    parser.add_argument('-PLC_DELTA', type=float, default=cfg.PLC_DELTA)
    parser.add_argument('-PLC_STEP_SIZE', type=float, default=cfg.PLC_STEP_SIZE)
    parser.add_argument('-PLC_LRT_RATIO_F', type=float, default=cfg.PLC_LRT_RATIO_F)
    parser.add_argument('-PLC_MAX_DELTA_F', type=float, default=cfg.PLC_MAX_DELTA_F)
    parser.add_argument('-SEAL_TIME', type=int, default=cfg.SEAL_TIME)
    parser.add_argument('-OLS_ALPHA', type=float, default=cfg.OLS_ALPHA)

    parser.add_argument('-MV_TYPE', type=str, default=cfg.MV_TYPE)
    parser.add_argument('-GVCNN_M', type=int, default=cfg.GVCNN_M)
    parser.add_argument('-DAN_H', type=int, default=cfg.DAN_H)
    parser.add_argument('-DAN_NUM_HEADS_F', type=int, default=cfg.DAN_NUM_HEADS_F)
    parser.add_argument('-DAN_INNER_DIM_F', type=int, default=cfg.DAN_INNER_DIM_F)
    parser.add_argument('-DAN_DROPOUT_F', type=float, default=cfg.DAN_DROPOUT_F)
    parser.add_argument('-CVR_K', type=int, default=cfg.CVR_K)
    parser.add_argument('-CVR_LAMBDA', type=float, default=cfg.CVR_LAMBDA)
    parser.add_argument('-CVR_NUM_HEADS_F', type=int, default=cfg.CVR_NUM_HEADS_F)
    parser.add_argument('-CVR_INNER_DIM_F', type=int, default=cfg.CVR_INNER_DIM_F)
    parser.add_argument('-CVR_NORM_EPS_F', type=float, default=cfg.CVR_NORM_EPS_F)
    parser.add_argument('-CVR_OTK_HEADS_F', type=int, default=cfg.CVR_OTK_HEADS_F)
    parser.add_argument('-CVR_OTK_EPS_F', type=float, default=cfg.CVR_OTK_EPS_F)
    parser.add_argument('-CVR_OTK_MAX_ITER_F', type=int, default=cfg.CVR_OTK_MAX_ITER_F)
    parser.add_argument('-CVR_DROPOUT_F', type=float, default=cfg.CVR_DROPOUT_F)
    parser.add_argument('-CVR_COORD_DIM_F', type=int, default=cfg.CVR_COORD_DIM_F)

    parser.add_argument('-REPETITION', type=int, default=cfg.REPETITION)

    parser.add_argument('-SV_WEIGHT_PATH', type=str, default=cfg.SV_WEIGHT_PATH)
    parser.add_argument('-SV_OUTPUT_PATH', type=str, default=cfg.SV_OUTPUT_PATH)
    parser.add_argument('-SV_TEST_WEIGHT', type=str, default=cfg.SV_TEST_WEIGHT)
    parser.add_argument('-MV_WEIGHT_PATH', type=str, default=cfg.MV_WEIGHT_PATH)
    parser.add_argument('-MV_TEST_WEIGHT', type=str, default=cfg.MV_TEST_WEIGHT)

    parser.add_argument('-SV_FLAG', type=str, default=cfg.SV_FLAG)
    parser.add_argument('-MV_FLAG', type=str, default=cfg.MV_FLAG)

    opt = parser.parse_args()

    return opt

